{"version":3,"file":"encryptor.mock.js","sourceRoot":"","sources":["../../src/test/encryptor.mock.ts"],"names":[],"mappings":";;;AACA,iCAA6B;AAE7B,MAAM,QAAQ,GAAG,aAAa,CAAC;AAgG7B,4BAAQ;AA/FV,MAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC;IACzC,GAAG,EAAE,SAAS;IACd,GAAG,EAAE,IAAI;IACT,CAAC,EAAE,6CAA6C;IAChD,gEAAgE;IAChE,OAAO,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;IAC/B,GAAG,EAAE,KAAK;CACX,CAAC,CAAC;AA2FD,kDAAmB;AA1FrB,MAAM,oBAAoB,GAAG,8CAA8C,CAAC;AAC5E,MAAM,oBAAoB,GAAG,0zBAA0zB,oBAAoB,IAAI,CAAC;AAEh3B,MAAM,sBAAsB,GAAG,qBAAqB,CAAC;AAErD,MAAM,kBAAkB,GAAG,KAAK,CAAC;AAmF/B,gDAAkB;AAlFpB,MAAM,QAAQ,GAAG,oBAAoB,CAAC;AAmFpC,4BAAQ;AAlFV,MAAM,SAAS,GAAG,MAAM,CAAC;AAoFvB,8BAAS;AAnFX,iDAAiD;AACjD,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAClC,IAAI,QAAc,CAAC;AAEnB,MAAM,aAAa,GAAG;IACpB,OAAO,EAAE,IAAA,YAAI,GAAE,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;QACrD,QAAQ,GAAG,OAAO,CAAC;QAEnB,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF,iBAAiB,EAAE,IAAA,YAAI,GAAE,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;QAC/D,QAAQ,GAAG,OAAO,CAAC;QAEnB,OAAO,OAAO,CAAC,OAAO,CAAC;YACrB,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;YACzC,iBAAiB,EAAE,kBAAkB;SACtC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,KAAK,CAAC,OAAO,CAAC,SAAiB,EAAE,KAAa;QAC5C,IAAI,SAAS,IAAI,SAAS,KAAK,QAAQ,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,EAAE,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,OAAe;QACjD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACtE,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,SAAiB,EAAE,KAAa;QACtD,IAAI,SAAS,IAAI,SAAS,KAAK,QAAQ,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;QAED,MAAM,MAAM,GAAG,QAAQ;YACrB,CAAC,CAAC;gBACE,KAAK,EAAE,QAAQ;gBACf,iBAAiB,EAAE,mBAAmB;gBACtC,IAAI,EAAE,SAAS;aAChB;YACH,CAAC,CAAC,EAAE,CAAC;QACP,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAED,SAAS,CAAC,SAAiB;QACzB,IAAI,SAAS,KAAK,IAAI,EAAE;YACtB,MAAM,IAAI,SAAS,CACjB,sIAAsI,CACvI,CAAC;SACH;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc;QACZ,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAC9C,wCAAwC;QACxC,OAAO,IAAI,CAAC,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,GAAW,EAAE,IAAY;QAC5C,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,SAAiB;QACrC,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,YAAY;QACV,OAAO,aAAa,CAAC;IACvB,CAAC;CACF,CAAC;AAGA,sCAAa","sourcesContent":["import { Json } from '@metamask/utils';\nimport { stub } from 'sinon';\n\nconst PASSWORD = 'password123';\nconst MOCK_ENCRYPTION_KEY = JSON.stringify({\n  alg: 'A256GCM',\n  ext: true,\n  k: 'wYmxkxOOFBDP6F6VuuYFcRt_Po-tSLFHCWVolsHs4VI',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  key_ops: ['encrypt', 'decrypt'],\n  kty: 'oct',\n});\nconst MOCK_ENCRYPTION_SALT = 'HQ5sfhsb8XAQRJtD+UqcImT7Ve4n3YMagrh05YTOsjk=';\nconst MOCK_ENCRYPTION_DATA = `{\"data\":\"2fOOPRKClNrisB+tmqIcETyZvDuL2iIR1Hr1nO7XZHyMqVY1cDBetw2gY5C+cIo1qkpyv3bPp+4buUjp38VBsjbijM0F/FLOqWbcuKM9h9X0uwxsgsZ96uwcIf5I46NiMgoFlhppTTMZT0Nkocz+SnvHM0IgLsFan7JqBU++vSJvx2M1PDljZSunOsqyyL+DKmbYmM4umbouKV42dipUwrCvrQJmpiUZrSkpMJrPJk9ufDQO4CyIVo0qry3aNRdYFJ6rgSyq/k6rXMwGExCMHn8UlhNnAMuMKWPWR/ymK1bzNcNs4VU14iVjEXOZGPvD9cvqVe/VtcnIba6axNEEB4HWDOCdrDh5YNWwMlQVL7vSB2yOhPZByGhnEOloYsj2E5KEb9jFGskt7EKDEYNofr6t83G0c+B72VGYZeCvgtzXzgPwzIbhTtKkP+gdBmt2JNSYrTjLypT0q+v4C9BN1xWTxPmX6TTt0NzkI9pJxgN1VQAfSU9CyWTVpd4CBkgom2cSBsxZ2MNbdKF+qSWz3fQcmJ55hxM0EGJSt9+8eQOTuoJlBapRk4wdZKHR2jdKzPjSF2MAmyVD2kU51IKa/cVsckRFEes+m7dKyHRvlNwgT78W9tBDdZb5PSlfbZXnv8z5q1KtAj2lM2ogJ7brHBdevl4FISdTkObpwcUMcvACOOO0dj6CSYjSKr0ZJ2RLChVruZyPDxEhKGb/8Kv8trLOR3mck/et6d050/NugezycNk4nnzu5iP90gPbSzaqdZI=\",\"iv\":\"qTGO1afGv3waHN9KoW34Eg==\",\"salt\":\"${MOCK_ENCRYPTION_SALT}\"}`;\n\nconst INVALID_PASSWORD_ERROR = 'Incorrect password.';\n\nconst MOCK_HARDCODED_KEY = 'key';\nconst MOCK_HEX = '0xabcdef0123456789';\nconst MOCK_SALT = 'SALT';\n// eslint-disable-next-line no-restricted-globals\nconst MOCK_KEY = Buffer.alloc(32);\nlet cacheVal: Json;\n\nconst mockEncryptor = {\n  encrypt: stub().callsFake(async (_password, dataObj) => {\n    cacheVal = dataObj;\n\n    return Promise.resolve(MOCK_HEX);\n  }),\n\n  encryptWithDetail: stub().callsFake(async (_password, dataObj) => {\n    cacheVal = dataObj;\n\n    return Promise.resolve({\n      vault: JSON.stringify({ salt: MOCK_HEX }),\n      exportedKeyString: MOCK_HARDCODED_KEY,\n    });\n  }),\n\n  async decrypt(_password: string, _text: string) {\n    if (_password && _password !== PASSWORD) {\n      throw new Error(INVALID_PASSWORD_ERROR);\n    }\n\n    return Promise.resolve(cacheVal ?? {});\n  },\n\n  async decryptWithEncryptedKeyString(_keyStr: string) {\n    const { vault } = await this.decryptWithDetail(_keyStr, 'mock vault');\n    return vault;\n  },\n\n  async decryptWithDetail(_password: string, _text: string) {\n    if (_password && _password !== PASSWORD) {\n      throw new Error(INVALID_PASSWORD_ERROR);\n    }\n\n    const result = cacheVal\n      ? {\n          vault: cacheVal,\n          exportedKeyString: MOCK_ENCRYPTION_KEY,\n          salt: MOCK_SALT,\n        }\n      : {};\n    return Promise.resolve(result);\n  },\n\n  importKey(keyString: string) {\n    if (keyString === '{}') {\n      throw new TypeError(\n        `Failed to execute 'importKey' on 'SubtleCrypto': The provided value is not of type '(ArrayBuffer or ArrayBufferView or JsonWebKey)'.`,\n      );\n    }\n    return null;\n  },\n\n  encryptWithKey() {\n    const data = JSON.parse(MOCK_ENCRYPTION_DATA);\n    // Salt is not provided from this method\n    delete data.salt;\n    return data;\n  },\n\n  async decryptWithKey(key: string, text: string) {\n    return this.decrypt(key, text);\n  },\n\n  async keyFromPassword(_password: string) {\n    return Promise.resolve(MOCK_KEY);\n  },\n\n  generateSalt() {\n    return 'WHADDASALT!';\n  },\n};\n\nexport {\n  mockEncryptor,\n  PASSWORD,\n  MOCK_HARDCODED_KEY,\n  MOCK_HEX,\n  MOCK_ENCRYPTION_KEY,\n  MOCK_SALT,\n};\n"]}